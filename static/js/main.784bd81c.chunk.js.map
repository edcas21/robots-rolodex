{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","robot","id","alt","name","email","CardList","robots","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,MAAMC,GAAtC,uCACHC,IAAI,UAEN,6BAAKL,EAAMG,MAAMG,OACjB,4BAAIN,EAAMG,MAAMI,YCLPC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,OAAOC,KAAI,SAACP,GAAD,OAChB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,UCNZO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCgHJG,E,kDAhHb,aAAe,IAAD,8BAEZ,gBAkCFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjCtC,EAAKC,MAAQ,CACXb,OAAQ,GACRU,YAAa,IANH,E,qDAqBd,WAAqB,IAAD,OAElBI,MAAM,6CAEHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,OAAQkB,S,oBAa3C,WAAS,MAGyBC,KAAKN,MAA7Bb,EAHD,EAGCA,OAAQU,EAHT,EAGSA,YAKVU,EAAiBpB,EAAOqB,QAAO,SAAA3B,GAAK,OACxCA,EAAMG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACE,sBAAK9B,UAAU,MAAf,UAEA,gDAEA,cAAC,EAAD,CACEW,YAAY,mBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,OAAQoB,W,GA/DNI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.784bd81c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      src={`https://robohash.org/${props.robot.id}213321ADM.png?set=set1&size=180x180`}\r\n      alt=\"robot\"\r\n    />\r\n    <h2>{props.robot.name}</h2>\r\n    <p>{props.robot.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from '../card/card.component';\r\n\r\n// props is any parameter that we pass into the CardList element in App.js\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.robots.map((robot) => (\r\n        <Card key={robot.id} robot={robot}/>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n\r\n    <input\r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={ handleChange }\r\n    />\r\n\r\n);","import './App.css';\nimport React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/searchbox/search-box.component';\n\n\n// Component gives you the option to use a 'state'\nclass App extends Component {\n\n  constructor() {\n    // Calls constructor of component class and gives access to 'state'\n    super();\n\n    this.state = {\n      robots: [],\n      searchField: ''\n    };\n\n    // Let JS know that we have a custom handleChange function\n    // Looks like maybe some update to React have gotten rid of the need for this\n    // Works fine with or without this declaration\n    // this.handleChange = this.handleChange.bind(this);\n\n    // this.state = {\n    //   string: 'Hello Edgar'\n    // }\n\n  }\n\n  //Lifecycle Methods\n  componentDidMount() {\n    //fetch from this resource\n    fetch('http://jsonplaceholder.typicode.com/users')\n    // Then format it as an array of json objects\n      .then(response => response.json())\n    // Then take that json data and populate it with the data from users\n      .then(users => this.setState({ robots: users }));\n  }\n\n  // handleChange (e) {\n  //   this.setState({ searchField: e.target.value });\n  // }\n\n  // Equivalent arrow function that negates the need to bind this to it in constructor\n  // AKA Lexical Scoping\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n\n    {/* Destructuring */}\n    const { robots, searchField } = this.state;\n    {/* equivalent to:  \n        const robots = this.state.robots;\n        const searchField = this.state.searchField;\n    */}\n    const filteredRobots = robots.filter(robot => \n      robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n\n      <h1>Robots Rolodex</h1>\n\n      <SearchBox\n        placeholder='search robots...'\n        handleChange={this.handleChange}\n      />\n      {/* robots array in state becomes part of props */}\n      <CardList robots={filteredRobots}>\n        {/* Anything in here becomes an attribute in props called 'children' */}\n      </CardList>\n        \n\n\n        {/*<header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            How to call a js expression inside js html aka JSX\n            { this.state.string }\n          </p>\n\n           In this case we're changing the state on a button click event. We're updating string with a new value.\n          <button onClick={() => this.setState({ string: 'Hello Maricela' })}>Change Text</button>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>*/}\n      </div>\n    );\n  }\n}\n\n// OR\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Hello my name is Edgar\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}